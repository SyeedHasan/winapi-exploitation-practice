#include <windows.h>
#include <stdio.h>
#include <iostream>
#include <tchar.h>

BOOL CreateProcessImp(TCHAR* cmdLine)
{
	STARTUPINFO si;
	PROCESS_INFORMATION pi;

	ZeroMemory(&si, sizeof(si)); //File the STARTUPINFO structure with Zeroes
	si.cb = sizeof(si); // Set it's size (the structure's size) to be the size of the SI struct
	ZeroMemory(&pi, sizeof(pi)); // Repeat with PROC_INFO which is used by CreateProcess

	// Start the child process. 
	if (!CreateProcess(NULL,   // No module name (use command line)
		cmdLine,        // Command line
		NULL,           // Process handle not inheritable
		NULL,           // Thread handle not inheritable
		FALSE,          // Set handle inheritance to FALSE
		0,              // No creation flags
		NULL,           // Use parent's environment block
		NULL,           // Use parent's starting directory 
		&si,            // Pointer to STARTUPINFO structure
		&pi)           // Pointer to PROCESS_INFORMATION structure
		)
	{
		printf("CreateProcess failed (%d).\n", GetLastError());
		return 1;
	}
	else {
		std::cout << "Process ID: " << pi.dwProcessId << std::endl;
	}

	// Wait until child process exits.
	WaitForSingleObject(pi.hProcess, INFINITE);

	// Close process and thread handles. 
	CloseHandle(pi.hProcess); //Handle to the process
	CloseHandle(pi.hThread); //Handle to the primary thread

	return 1;
}